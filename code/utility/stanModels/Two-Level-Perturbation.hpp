// Code generated by Stan version 2.18.1

#include <stan/model/model_header.hpp>

namespace Two_Level_Perturbation_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "C:/Users/Peter/Desktop/Zatka-Haas_et_al_2020/code/utility/stanModels/Two-Level-Perturbation.stan");
    reader.add_event(113, 111, "end", "C:/Users/Peter/Desktop/Zatka-Haas_et_al_2020/code/utility/stanModels/Two-Level-Perturbation.stan");
    return reader;
}

class Two_Level_Perturbation_model : public prob_grad {
private:
    int numTrials;
    int numSessions;
    int numSubjects;
    vector<int> sessionID;
    vector<int> subjectID;
    vector_d contrastLeft;
    vector_d contrastRight;
    vector<int> choice;
    int numPerturbations;
    vector<int> perturbation;
    vector<int> subjID_session;
public:
    Two_Level_Perturbation_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    Two_Level_Perturbation_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "Two_Level_Perturbation_model_namespace::Two_Level_Perturbation_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "numTrials", "int", context__.to_vec());
            numTrials = int(0);
            vals_i__ = context__.vals_i("numTrials");
            pos__ = 0;
            numTrials = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "numSessions", "int", context__.to_vec());
            numSessions = int(0);
            vals_i__ = context__.vals_i("numSessions");
            pos__ = 0;
            numSessions = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "numSubjects", "int", context__.to_vec());
            numSubjects = int(0);
            vals_i__ = context__.vals_i("numSubjects");
            pos__ = 0;
            numSubjects = vals_i__[pos__++];
            current_statement_begin__ = 5;
            validate_non_negative_index("sessionID", "numTrials", numTrials);
            context__.validate_dims("data initialization", "sessionID", "int", context__.to_vec(numTrials));
            validate_non_negative_index("sessionID", "numTrials", numTrials);
            sessionID = std::vector<int>(numTrials,int(0));
            vals_i__ = context__.vals_i("sessionID");
            pos__ = 0;
            size_t sessionID_limit_0__ = numTrials;
            for (size_t i_0__ = 0; i_0__ < sessionID_limit_0__; ++i_0__) {
                sessionID[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("subjectID", "numTrials", numTrials);
            context__.validate_dims("data initialization", "subjectID", "int", context__.to_vec(numTrials));
            validate_non_negative_index("subjectID", "numTrials", numTrials);
            subjectID = std::vector<int>(numTrials,int(0));
            vals_i__ = context__.vals_i("subjectID");
            pos__ = 0;
            size_t subjectID_limit_0__ = numTrials;
            for (size_t i_0__ = 0; i_0__ < subjectID_limit_0__; ++i_0__) {
                subjectID[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("contrastLeft", "numTrials", numTrials);
            context__.validate_dims("data initialization", "contrastLeft", "vector_d", context__.to_vec(numTrials));
            validate_non_negative_index("contrastLeft", "numTrials", numTrials);
            contrastLeft = vector_d(static_cast<Eigen::VectorXd::Index>(numTrials));
            vals_r__ = context__.vals_r("contrastLeft");
            pos__ = 0;
            size_t contrastLeft_i_vec_lim__ = numTrials;
            for (size_t i_vec__ = 0; i_vec__ < contrastLeft_i_vec_lim__; ++i_vec__) {
                contrastLeft[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("contrastRight", "numTrials", numTrials);
            context__.validate_dims("data initialization", "contrastRight", "vector_d", context__.to_vec(numTrials));
            validate_non_negative_index("contrastRight", "numTrials", numTrials);
            contrastRight = vector_d(static_cast<Eigen::VectorXd::Index>(numTrials));
            vals_r__ = context__.vals_r("contrastRight");
            pos__ = 0;
            size_t contrastRight_i_vec_lim__ = numTrials;
            for (size_t i_vec__ = 0; i_vec__ < contrastRight_i_vec_lim__; ++i_vec__) {
                contrastRight[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("choice", "numTrials", numTrials);
            context__.validate_dims("data initialization", "choice", "int", context__.to_vec(numTrials));
            validate_non_negative_index("choice", "numTrials", numTrials);
            choice = std::vector<int>(numTrials,int(0));
            vals_i__ = context__.vals_i("choice");
            pos__ = 0;
            size_t choice_limit_0__ = numTrials;
            for (size_t i_0__ = 0; i_0__ < choice_limit_0__; ++i_0__) {
                choice[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "numPerturbations", "int", context__.to_vec());
            numPerturbations = int(0);
            vals_i__ = context__.vals_i("numPerturbations");
            pos__ = 0;
            numPerturbations = vals_i__[pos__++];
            current_statement_begin__ = 11;
            validate_non_negative_index("perturbation", "numTrials", numTrials);
            context__.validate_dims("data initialization", "perturbation", "int", context__.to_vec(numTrials));
            validate_non_negative_index("perturbation", "numTrials", numTrials);
            perturbation = std::vector<int>(numTrials,int(0));
            vals_i__ = context__.vals_i("perturbation");
            pos__ = 0;
            size_t perturbation_limit_0__ = numTrials;
            for (size_t i_0__ = 0; i_0__ < perturbation_limit_0__; ++i_0__) {
                perturbation[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("subjID_session", "numSessions", numSessions);
            context__.validate_dims("data initialization", "subjID_session", "int", context__.to_vec(numSessions));
            validate_non_negative_index("subjID_session", "numSessions", numSessions);
            subjID_session = std::vector<int>(numSessions,int(0));
            vals_i__ = context__.vals_i("subjID_session");
            pos__ = 0;
            size_t subjID_session_limit_0__ = numSessions;
            for (size_t i_0__ = 0; i_0__ < subjID_session_limit_0__; ++i_0__) {
                subjID_session[i_0__] = vals_i__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 2;
            check_greater_or_equal(function__,"numTrials",numTrials,1);
            current_statement_begin__ = 3;
            check_greater_or_equal(function__,"numSessions",numSessions,1);
            current_statement_begin__ = 4;
            check_greater_or_equal(function__,"numSubjects",numSubjects,1);
            current_statement_begin__ = 5;
            for (int k0__ = 0; k0__ < numTrials; ++k0__) {
                check_greater_or_equal(function__,"sessionID[k0__]",sessionID[k0__],1);
                check_less_or_equal(function__,"sessionID[k0__]",sessionID[k0__],numSessions);
            }
            current_statement_begin__ = 6;
            for (int k0__ = 0; k0__ < numTrials; ++k0__) {
                check_greater_or_equal(function__,"subjectID[k0__]",subjectID[k0__],1);
                check_less_or_equal(function__,"subjectID[k0__]",subjectID[k0__],numSubjects);
            }
            current_statement_begin__ = 7;
            check_greater_or_equal(function__,"contrastLeft",contrastLeft,0);
            check_less_or_equal(function__,"contrastLeft",contrastLeft,1);
            current_statement_begin__ = 8;
            check_greater_or_equal(function__,"contrastRight",contrastRight,0);
            check_less_or_equal(function__,"contrastRight",contrastRight,1);
            current_statement_begin__ = 9;
            for (int k0__ = 0; k0__ < numTrials; ++k0__) {
                check_greater_or_equal(function__,"choice[k0__]",choice[k0__],1);
                check_less_or_equal(function__,"choice[k0__]",choice[k0__],3);
            }
            current_statement_begin__ = 10;
            check_greater_or_equal(function__,"numPerturbations",numPerturbations,0);
            current_statement_begin__ = 11;
            for (int k0__ = 0; k0__ < numTrials; ++k0__) {
                check_greater_or_equal(function__,"perturbation[k0__]",perturbation[k0__],0);
                check_less_or_equal(function__,"perturbation[k0__]",perturbation[k0__],numPerturbations);
            }
            current_statement_begin__ = 12;
            for (int k0__ = 0; k0__ < numSessions; ++k0__) {
                check_greater_or_equal(function__,"subjID_session[k0__]",subjID_session[k0__],1);
                check_less_or_equal(function__,"subjID_session[k0__]",subjID_session[k0__],numSubjects);
            }
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 16;
            validate_non_negative_index("bias", "2", 2);
            num_params_r__ += 2;
            current_statement_begin__ = 17;
            validate_non_negative_index("sens", "2", 2);
            num_params_r__ += 2;
            current_statement_begin__ = 18;
            ++num_params_r__;
            current_statement_begin__ = 21;
            validate_non_negative_index("sd_sess", "5", 5);
            num_params_r__ += 5;
            current_statement_begin__ = 22;
        validate_non_negative_index("z_sess", "5", 5);
            validate_non_negative_index("z_sess", "numSessions", numSessions);
            num_params_r__ += 5 * numSessions;
            current_statement_begin__ = 23;
            validate_non_negative_index("rho_sess", "5", 5);
            num_params_r__ += ((5 * (5 - 1)) / 2);
            current_statement_begin__ = 26;
            validate_non_negative_index("sd_subj", "5", 5);
            num_params_r__ += 5;
            current_statement_begin__ = 27;
        validate_non_negative_index("z_subj", "5", 5);
            validate_non_negative_index("z_subj", "numSubjects", numSubjects);
            num_params_r__ += 5 * numSubjects;
            current_statement_begin__ = 28;
            validate_non_negative_index("rho_subj", "5", 5);
            num_params_r__ += ((5 * (5 - 1)) / 2);
            current_statement_begin__ = 31;
            validate_non_negative_index("delta", "4", 4);
            validate_non_negative_index("delta", "numPerturbations", numPerturbations);
            num_params_r__ += 4 * numPerturbations;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~Two_Level_Perturbation_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("bias")))
            throw std::runtime_error("variable bias missing");
        vals_r__ = context__.vals_r("bias");
        pos__ = 0U;
        validate_non_negative_index("bias", "2", 2);
        context__.validate_dims("initialization", "bias", "vector_d", context__.to_vec(2));
        vector_d bias(static_cast<Eigen::VectorXd::Index>(2));
        for (int j1__ = 0U; j1__ < 2; ++j1__)
            bias(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(bias);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable bias: ") + e.what());
        }

        if (!(context__.contains_r("sens")))
            throw std::runtime_error("variable sens missing");
        vals_r__ = context__.vals_r("sens");
        pos__ = 0U;
        validate_non_negative_index("sens", "2", 2);
        context__.validate_dims("initialization", "sens", "vector_d", context__.to_vec(2));
        vector_d sens(static_cast<Eigen::VectorXd::Index>(2));
        for (int j1__ = 0U; j1__ < 2; ++j1__)
            sens(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sens);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sens: ") + e.what());
        }

        if (!(context__.contains_r("n_exp")))
            throw std::runtime_error("variable n_exp missing");
        vals_r__ = context__.vals_r("n_exp");
        pos__ = 0U;
        context__.validate_dims("initialization", "n_exp", "double", context__.to_vec());
        double n_exp(0);
        n_exp = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,n_exp);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable n_exp: ") + e.what());
        }

        if (!(context__.contains_r("sd_sess")))
            throw std::runtime_error("variable sd_sess missing");
        vals_r__ = context__.vals_r("sd_sess");
        pos__ = 0U;
        validate_non_negative_index("sd_sess", "5", 5);
        context__.validate_dims("initialization", "sd_sess", "vector_d", context__.to_vec(5));
        vector_d sd_sess(static_cast<Eigen::VectorXd::Index>(5));
        for (int j1__ = 0U; j1__ < 5; ++j1__)
            sd_sess(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sd_sess);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_sess: ") + e.what());
        }

        if (!(context__.contains_r("z_sess")))
            throw std::runtime_error("variable z_sess missing");
        vals_r__ = context__.vals_r("z_sess");
        pos__ = 0U;
        validate_non_negative_index("z_sess", "5", 5);
        validate_non_negative_index("z_sess", "numSessions", numSessions);
        context__.validate_dims("initialization", "z_sess", "matrix_d", context__.to_vec(5,numSessions));
        matrix_d z_sess(static_cast<Eigen::VectorXd::Index>(5),static_cast<Eigen::VectorXd::Index>(numSessions));
        for (int j2__ = 0U; j2__ < numSessions; ++j2__)
            for (int j1__ = 0U; j1__ < 5; ++j1__)
                z_sess(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(z_sess);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_sess: ") + e.what());
        }

        if (!(context__.contains_r("rho_sess")))
            throw std::runtime_error("variable rho_sess missing");
        vals_r__ = context__.vals_r("rho_sess");
        pos__ = 0U;
        validate_non_negative_index("rho_sess", "5", 5);
        validate_non_negative_index("rho_sess", "5", 5);
        context__.validate_dims("initialization", "rho_sess", "matrix_d", context__.to_vec(5,5));
        matrix_d rho_sess(static_cast<Eigen::VectorXd::Index>(5),static_cast<Eigen::VectorXd::Index>(5));
        for (int j2__ = 0U; j2__ < 5; ++j2__)
            for (int j1__ = 0U; j1__ < 5; ++j1__)
                rho_sess(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_corr_unconstrain(rho_sess);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable rho_sess: ") + e.what());
        }

        if (!(context__.contains_r("sd_subj")))
            throw std::runtime_error("variable sd_subj missing");
        vals_r__ = context__.vals_r("sd_subj");
        pos__ = 0U;
        validate_non_negative_index("sd_subj", "5", 5);
        context__.validate_dims("initialization", "sd_subj", "vector_d", context__.to_vec(5));
        vector_d sd_subj(static_cast<Eigen::VectorXd::Index>(5));
        for (int j1__ = 0U; j1__ < 5; ++j1__)
            sd_subj(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sd_subj);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sd_subj: ") + e.what());
        }

        if (!(context__.contains_r("z_subj")))
            throw std::runtime_error("variable z_subj missing");
        vals_r__ = context__.vals_r("z_subj");
        pos__ = 0U;
        validate_non_negative_index("z_subj", "5", 5);
        validate_non_negative_index("z_subj", "numSubjects", numSubjects);
        context__.validate_dims("initialization", "z_subj", "matrix_d", context__.to_vec(5,numSubjects));
        matrix_d z_subj(static_cast<Eigen::VectorXd::Index>(5),static_cast<Eigen::VectorXd::Index>(numSubjects));
        for (int j2__ = 0U; j2__ < numSubjects; ++j2__)
            for (int j1__ = 0U; j1__ < 5; ++j1__)
                z_subj(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(z_subj);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z_subj: ") + e.what());
        }

        if (!(context__.contains_r("rho_subj")))
            throw std::runtime_error("variable rho_subj missing");
        vals_r__ = context__.vals_r("rho_subj");
        pos__ = 0U;
        validate_non_negative_index("rho_subj", "5", 5);
        validate_non_negative_index("rho_subj", "5", 5);
        context__.validate_dims("initialization", "rho_subj", "matrix_d", context__.to_vec(5,5));
        matrix_d rho_subj(static_cast<Eigen::VectorXd::Index>(5),static_cast<Eigen::VectorXd::Index>(5));
        for (int j2__ = 0U; j2__ < 5; ++j2__)
            for (int j1__ = 0U; j1__ < 5; ++j1__)
                rho_subj(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.cholesky_corr_unconstrain(rho_subj);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable rho_subj: ") + e.what());
        }

        if (!(context__.contains_r("delta")))
            throw std::runtime_error("variable delta missing");
        vals_r__ = context__.vals_r("delta");
        pos__ = 0U;
        validate_non_negative_index("delta", "4", 4);
        validate_non_negative_index("delta", "numPerturbations", numPerturbations);
        context__.validate_dims("initialization", "delta", "double", context__.to_vec(4,numPerturbations));
        std::vector<std::vector<double> > delta(4,std::vector<double>(numPerturbations,double(0)));
        for (int i1__ = 0U; i1__ < numPerturbations; ++i1__)
            for (int i0__ = 0U; i0__ < 4; ++i0__)
                delta[i0__][i1__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < 4; ++i0__)
            for (int i1__ = 0U; i1__ < numPerturbations; ++i1__)
                try {
            writer__.scalar_unconstrain(delta[i0__][i1__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable delta: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  bias;
            (void) bias;  // dummy to suppress unused var warning
            if (jacobian__)
                bias = in__.vector_constrain(2,lp__);
            else
                bias = in__.vector_constrain(2);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  sens;
            (void) sens;  // dummy to suppress unused var warning
            if (jacobian__)
                sens = in__.vector_lb_constrain(0,2,lp__);
            else
                sens = in__.vector_lb_constrain(0,2);

            local_scalar_t__ n_exp;
            (void) n_exp;  // dummy to suppress unused var warning
            if (jacobian__)
                n_exp = in__.scalar_lb_constrain(0,lp__);
            else
                n_exp = in__.scalar_lb_constrain(0);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  sd_sess;
            (void) sd_sess;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_sess = in__.vector_lb_constrain(0,5,lp__);
            else
                sd_sess = in__.vector_lb_constrain(0,5);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  z_sess;
            (void) z_sess;  // dummy to suppress unused var warning
            if (jacobian__)
                z_sess = in__.matrix_constrain(5,numSessions,lp__);
            else
                z_sess = in__.matrix_constrain(5,numSessions);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  rho_sess;
            (void) rho_sess;  // dummy to suppress unused var warning
            if (jacobian__)
                rho_sess = in__.cholesky_corr_constrain(5,lp__);
            else
                rho_sess = in__.cholesky_corr_constrain(5);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  sd_subj;
            (void) sd_subj;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_subj = in__.vector_lb_constrain(0,5,lp__);
            else
                sd_subj = in__.vector_lb_constrain(0,5);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  z_subj;
            (void) z_subj;  // dummy to suppress unused var warning
            if (jacobian__)
                z_subj = in__.matrix_constrain(5,numSubjects,lp__);
            else
                z_subj = in__.matrix_constrain(5,numSubjects);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  rho_subj;
            (void) rho_subj;  // dummy to suppress unused var warning
            if (jacobian__)
                rho_subj = in__.cholesky_corr_constrain(5,lp__);
            else
                rho_subj = in__.cholesky_corr_constrain(5);

            vector<vector<local_scalar_t__> > delta;
            size_t dim_delta_0__ = 4;
            delta.resize(dim_delta_0__);
            for (size_t k_0__ = 0; k_0__ < dim_delta_0__; ++k_0__) {
                size_t dim_delta_1__ = numPerturbations;
                delta[k_0__].reserve(dim_delta_1__);
                for (size_t k_1__ = 0; k_1__ < dim_delta_1__; ++k_1__) {
                    if (jacobian__)
                        delta[k_0__].push_back(in__.scalar_constrain(lp__));
                    else
                        delta[k_0__].push_back(in__.scalar_constrain());
                }
            }


            // transformed parameters
            current_statement_begin__ = 34;
            validate_non_negative_index("logOdds", "3", 3);
            validate_non_negative_index("logOdds", "numTrials", numTrials);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > logOdds(numTrials, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(3))));
            stan::math::initialize(logOdds, DUMMY_VAR__);
            stan::math::fill(logOdds,DUMMY_VAR__);
            current_statement_begin__ = 35;
            validate_non_negative_index("b_sess", "5", 5);
            validate_non_negative_index("b_sess", "numSessions", numSessions);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  b_sess(static_cast<Eigen::VectorXd::Index>(5),static_cast<Eigen::VectorXd::Index>(numSessions));
            (void) b_sess;  // dummy to suppress unused var warning

            stan::math::initialize(b_sess, DUMMY_VAR__);
            stan::math::fill(b_sess,DUMMY_VAR__);
            current_statement_begin__ = 36;
            validate_non_negative_index("b_subj", "5", 5);
            validate_non_negative_index("b_subj", "numSubjects", numSubjects);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  b_subj(static_cast<Eigen::VectorXd::Index>(5),static_cast<Eigen::VectorXd::Index>(numSubjects));
            (void) b_subj;  // dummy to suppress unused var warning

            stan::math::initialize(b_subj, DUMMY_VAR__);
            stan::math::fill(b_subj,DUMMY_VAR__);


            current_statement_begin__ = 39;
            stan::math::assign(b_sess, multiply(diag_pre_multiply(sd_sess,rho_sess),z_sess));
            current_statement_begin__ = 40;
            stan::math::assign(b_subj, multiply(diag_pre_multiply(sd_subj,rho_subj),z_subj));
            {
            current_statement_begin__ = 44;
            local_scalar_t__ BL;
            (void) BL;  // dummy to suppress unused var warning

            stan::math::initialize(BL, DUMMY_VAR__);
            stan::math::fill(BL,DUMMY_VAR__);
            current_statement_begin__ = 45;
            local_scalar_t__ BR;
            (void) BR;  // dummy to suppress unused var warning

            stan::math::initialize(BR, DUMMY_VAR__);
            stan::math::fill(BR,DUMMY_VAR__);
            current_statement_begin__ = 46;
            local_scalar_t__ SL;
            (void) SL;  // dummy to suppress unused var warning

            stan::math::initialize(SL, DUMMY_VAR__);
            stan::math::fill(SL,DUMMY_VAR__);
            current_statement_begin__ = 47;
            local_scalar_t__ SR;
            (void) SR;  // dummy to suppress unused var warning

            stan::math::initialize(SR, DUMMY_VAR__);
            stan::math::fill(SR,DUMMY_VAR__);
            current_statement_begin__ = 48;
            local_scalar_t__ N;
            (void) N;  // dummy to suppress unused var warning

            stan::math::initialize(N, DUMMY_VAR__);
            stan::math::fill(N,DUMMY_VAR__);


            current_statement_begin__ = 51;
            for (int n = 1; n <= numTrials; ++n) {

                current_statement_begin__ = 53;
                stan::math::assign(BL, ((get_base1(bias,1,"bias",1) + get_base1(b_sess,1,get_base1(sessionID,n,"sessionID",1),"b_sess",1)) + get_base1(b_subj,1,get_base1(subjectID,n,"subjectID",1),"b_subj",1)));
                current_statement_begin__ = 54;
                stan::math::assign(BR, ((get_base1(bias,2,"bias",1) + get_base1(b_sess,2,get_base1(sessionID,n,"sessionID",1),"b_sess",1)) + get_base1(b_subj,2,get_base1(subjectID,n,"subjectID",1),"b_subj",1)));
                current_statement_begin__ = 55;
                stan::math::assign(SL, ((get_base1(sens,1,"sens",1) + get_base1(b_sess,3,get_base1(sessionID,n,"sessionID",1),"b_sess",1)) + get_base1(b_subj,3,get_base1(subjectID,n,"subjectID",1),"b_subj",1)));
                current_statement_begin__ = 56;
                stan::math::assign(SR, ((get_base1(sens,2,"sens",1) + get_base1(b_sess,4,get_base1(sessionID,n,"sessionID",1),"b_sess",1)) + get_base1(b_subj,4,get_base1(subjectID,n,"subjectID",1),"b_subj",1)));
                current_statement_begin__ = 57;
                stan::math::assign(N, ((n_exp + get_base1(b_sess,5,get_base1(sessionID,n,"sessionID",1),"b_sess",1)) + get_base1(b_subj,5,get_base1(subjectID,n,"subjectID",1),"b_subj",1)));
                current_statement_begin__ = 59;
                if (as_bool(logical_gt(get_base1(perturbation,n,"perturbation",1),0))) {

                    current_statement_begin__ = 61;
                    stan::math::assign(BL, (BL + get_base1(get_base1(delta,1,"delta",1),get_base1(perturbation,n,"perturbation",1),"delta",2)));
                    current_statement_begin__ = 62;
                    stan::math::assign(BR, (BR + get_base1(get_base1(delta,2,"delta",1),get_base1(perturbation,n,"perturbation",1),"delta",2)));
                    current_statement_begin__ = 63;
                    stan::math::assign(SL, (SL + get_base1(get_base1(delta,3,"delta",1),get_base1(perturbation,n,"perturbation",1),"delta",2)));
                    current_statement_begin__ = 64;
                    stan::math::assign(SR, (SR + get_base1(get_base1(delta,4,"delta",1),get_base1(perturbation,n,"perturbation",1),"delta",2)));
                }
                current_statement_begin__ = 67;
                stan::model::assign(logOdds, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            (BL + (SL * pow(get_base1(contrastLeft,n,"contrastLeft",1),N))), 
                            "assigning variable logOdds");
                current_statement_begin__ = 68;
                stan::model::assign(logOdds, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (BR + (SR * pow(get_base1(contrastRight,n,"contrastRight",1),N))), 
                            "assigning variable logOdds");
                current_statement_begin__ = 69;
                stan::model::assign(logOdds, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                            0, 
                            "assigning variable logOdds");
            }
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < numTrials; ++i0__) {
                for (int i1__ = 0; i1__ < 3; ++i1__) {
                    if (stan::math::is_uninitialized(logOdds[i0__](i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: logOdds" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < 5; ++i0__) {
                for (int i1__ = 0; i1__ < numSessions; ++i1__) {
                    if (stan::math::is_uninitialized(b_sess(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: b_sess" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < 5; ++i0__) {
                for (int i1__ = 0; i1__ < numSubjects; ++i1__) {
                    if (stan::math::is_uninitialized(b_subj(i0__,i1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: b_subj" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 34;
            current_statement_begin__ = 35;
            current_statement_begin__ = 36;

            // model body

            current_statement_begin__ = 75;
            lp_accum__.add(normal_log<propto__>(bias, 0, 2));
            current_statement_begin__ = 76;
            lp_accum__.add(normal_log<propto__>(sens, 5, 2));
            current_statement_begin__ = 77;
            lp_accum__.add(normal_log<propto__>(n_exp, 0.5, 0.25));
            current_statement_begin__ = 80;
            lp_accum__.add(normal_log<propto__>(to_vector(z_sess), 0, 1));
            current_statement_begin__ = 81;
            lp_accum__.add(normal_log<propto__>(to_vector(z_subj), 0, 1));
            current_statement_begin__ = 84;
            lp_accum__.add(cauchy_log<propto__>(sd_sess, 0, 1));
            current_statement_begin__ = 85;
            lp_accum__.add(cauchy_log<propto__>(sd_subj, 0, 1));
            current_statement_begin__ = 88;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(rho_sess, 2.0));
            current_statement_begin__ = 89;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(rho_subj, 2.0));
            current_statement_begin__ = 92;
            lp_accum__.add(normal_log<propto__>(to_array_1d(delta), 0, 2));
            current_statement_begin__ = 94;
            for (int n = 1; n <= numTrials; ++n) {

                current_statement_begin__ = 95;
                lp_accum__.add(categorical_logit_log<propto__>(get_base1(choice,n,"choice",1), get_base1(logOdds,n,"logOdds",1)));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("bias");
        names__.push_back("sens");
        names__.push_back("n_exp");
        names__.push_back("sd_sess");
        names__.push_back("z_sess");
        names__.push_back("rho_sess");
        names__.push_back("sd_subj");
        names__.push_back("z_subj");
        names__.push_back("rho_subj");
        names__.push_back("delta");
        names__.push_back("logOdds");
        names__.push_back("b_sess");
        names__.push_back("b_subj");
        names__.push_back("corr_sess");
        names__.push_back("corr_subj");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(5);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(5);
        dims__.push_back(numSessions);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(5);
        dims__.push_back(5);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(5);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(5);
        dims__.push_back(numSubjects);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(5);
        dims__.push_back(5);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(4);
        dims__.push_back(numPerturbations);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(numTrials);
        dims__.push_back(3);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(5);
        dims__.push_back(numSessions);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(5);
        dims__.push_back(numSubjects);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(5);
        dims__.push_back(5);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(5);
        dims__.push_back(5);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(numTrials);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "Two_Level_Perturbation_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d bias = in__.vector_constrain(2);
        vector_d sens = in__.vector_lb_constrain(0,2);
        double n_exp = in__.scalar_lb_constrain(0);
        vector_d sd_sess = in__.vector_lb_constrain(0,5);
        matrix_d z_sess = in__.matrix_constrain(5,numSessions);
        matrix_d rho_sess = in__.cholesky_corr_constrain(5);
        vector_d sd_subj = in__.vector_lb_constrain(0,5);
        matrix_d z_subj = in__.matrix_constrain(5,numSubjects);
        matrix_d rho_subj = in__.cholesky_corr_constrain(5);
        vector<vector<double> > delta;
        size_t dim_delta_0__ = 4;
        delta.resize(dim_delta_0__);
        for (size_t k_0__ = 0; k_0__ < dim_delta_0__; ++k_0__) {
            size_t dim_delta_1__ = numPerturbations;
            for (size_t k_1__ = 0; k_1__ < dim_delta_1__; ++k_1__) {
                delta[k_0__].push_back(in__.scalar_constrain());
            }
        }
            for (int k_0__ = 0; k_0__ < 2; ++k_0__) {
            vars__.push_back(bias[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < 2; ++k_0__) {
            vars__.push_back(sens[k_0__]);
            }
        vars__.push_back(n_exp);
            for (int k_0__ = 0; k_0__ < 5; ++k_0__) {
            vars__.push_back(sd_sess[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < numSessions; ++k_1__) {
                for (int k_0__ = 0; k_0__ < 5; ++k_0__) {
                vars__.push_back(z_sess(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < 5; ++k_1__) {
                for (int k_0__ = 0; k_0__ < 5; ++k_0__) {
                vars__.push_back(rho_sess(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < 5; ++k_0__) {
            vars__.push_back(sd_subj[k_0__]);
            }
            for (int k_1__ = 0; k_1__ < numSubjects; ++k_1__) {
                for (int k_0__ = 0; k_0__ < 5; ++k_0__) {
                vars__.push_back(z_subj(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < 5; ++k_1__) {
                for (int k_0__ = 0; k_0__ < 5; ++k_0__) {
                vars__.push_back(rho_subj(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < numPerturbations; ++k_1__) {
                for (int k_0__ = 0; k_0__ < 4; ++k_0__) {
                vars__.push_back(delta[k_0__][k_1__]);
                }
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 34;
            validate_non_negative_index("logOdds", "3", 3);
            validate_non_negative_index("logOdds", "numTrials", numTrials);
            vector<Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> > logOdds(numTrials, (Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1> (static_cast<Eigen::VectorXd::Index>(3))));
            stan::math::initialize(logOdds, DUMMY_VAR__);
            stan::math::fill(logOdds,DUMMY_VAR__);
            current_statement_begin__ = 35;
            validate_non_negative_index("b_sess", "5", 5);
            validate_non_negative_index("b_sess", "numSessions", numSessions);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  b_sess(static_cast<Eigen::VectorXd::Index>(5),static_cast<Eigen::VectorXd::Index>(numSessions));
            (void) b_sess;  // dummy to suppress unused var warning

            stan::math::initialize(b_sess, DUMMY_VAR__);
            stan::math::fill(b_sess,DUMMY_VAR__);
            current_statement_begin__ = 36;
            validate_non_negative_index("b_subj", "5", 5);
            validate_non_negative_index("b_subj", "numSubjects", numSubjects);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  b_subj(static_cast<Eigen::VectorXd::Index>(5),static_cast<Eigen::VectorXd::Index>(numSubjects));
            (void) b_subj;  // dummy to suppress unused var warning

            stan::math::initialize(b_subj, DUMMY_VAR__);
            stan::math::fill(b_subj,DUMMY_VAR__);


            current_statement_begin__ = 39;
            stan::math::assign(b_sess, multiply(diag_pre_multiply(sd_sess,rho_sess),z_sess));
            current_statement_begin__ = 40;
            stan::math::assign(b_subj, multiply(diag_pre_multiply(sd_subj,rho_subj),z_subj));
            {
            current_statement_begin__ = 44;
            local_scalar_t__ BL;
            (void) BL;  // dummy to suppress unused var warning

            stan::math::initialize(BL, DUMMY_VAR__);
            stan::math::fill(BL,DUMMY_VAR__);
            current_statement_begin__ = 45;
            local_scalar_t__ BR;
            (void) BR;  // dummy to suppress unused var warning

            stan::math::initialize(BR, DUMMY_VAR__);
            stan::math::fill(BR,DUMMY_VAR__);
            current_statement_begin__ = 46;
            local_scalar_t__ SL;
            (void) SL;  // dummy to suppress unused var warning

            stan::math::initialize(SL, DUMMY_VAR__);
            stan::math::fill(SL,DUMMY_VAR__);
            current_statement_begin__ = 47;
            local_scalar_t__ SR;
            (void) SR;  // dummy to suppress unused var warning

            stan::math::initialize(SR, DUMMY_VAR__);
            stan::math::fill(SR,DUMMY_VAR__);
            current_statement_begin__ = 48;
            local_scalar_t__ N;
            (void) N;  // dummy to suppress unused var warning

            stan::math::initialize(N, DUMMY_VAR__);
            stan::math::fill(N,DUMMY_VAR__);


            current_statement_begin__ = 51;
            for (int n = 1; n <= numTrials; ++n) {

                current_statement_begin__ = 53;
                stan::math::assign(BL, ((get_base1(bias,1,"bias",1) + get_base1(b_sess,1,get_base1(sessionID,n,"sessionID",1),"b_sess",1)) + get_base1(b_subj,1,get_base1(subjectID,n,"subjectID",1),"b_subj",1)));
                current_statement_begin__ = 54;
                stan::math::assign(BR, ((get_base1(bias,2,"bias",1) + get_base1(b_sess,2,get_base1(sessionID,n,"sessionID",1),"b_sess",1)) + get_base1(b_subj,2,get_base1(subjectID,n,"subjectID",1),"b_subj",1)));
                current_statement_begin__ = 55;
                stan::math::assign(SL, ((get_base1(sens,1,"sens",1) + get_base1(b_sess,3,get_base1(sessionID,n,"sessionID",1),"b_sess",1)) + get_base1(b_subj,3,get_base1(subjectID,n,"subjectID",1),"b_subj",1)));
                current_statement_begin__ = 56;
                stan::math::assign(SR, ((get_base1(sens,2,"sens",1) + get_base1(b_sess,4,get_base1(sessionID,n,"sessionID",1),"b_sess",1)) + get_base1(b_subj,4,get_base1(subjectID,n,"subjectID",1),"b_subj",1)));
                current_statement_begin__ = 57;
                stan::math::assign(N, ((n_exp + get_base1(b_sess,5,get_base1(sessionID,n,"sessionID",1),"b_sess",1)) + get_base1(b_subj,5,get_base1(subjectID,n,"subjectID",1),"b_subj",1)));
                current_statement_begin__ = 59;
                if (as_bool(logical_gt(get_base1(perturbation,n,"perturbation",1),0))) {

                    current_statement_begin__ = 61;
                    stan::math::assign(BL, (BL + get_base1(get_base1(delta,1,"delta",1),get_base1(perturbation,n,"perturbation",1),"delta",2)));
                    current_statement_begin__ = 62;
                    stan::math::assign(BR, (BR + get_base1(get_base1(delta,2,"delta",1),get_base1(perturbation,n,"perturbation",1),"delta",2)));
                    current_statement_begin__ = 63;
                    stan::math::assign(SL, (SL + get_base1(get_base1(delta,3,"delta",1),get_base1(perturbation,n,"perturbation",1),"delta",2)));
                    current_statement_begin__ = 64;
                    stan::math::assign(SR, (SR + get_base1(get_base1(delta,4,"delta",1),get_base1(perturbation,n,"perturbation",1),"delta",2)));
                }
                current_statement_begin__ = 67;
                stan::model::assign(logOdds, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            (BL + (SL * pow(get_base1(contrastLeft,n,"contrastLeft",1),N))), 
                            "assigning variable logOdds");
                current_statement_begin__ = 68;
                stan::model::assign(logOdds, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (BR + (SR * pow(get_base1(contrastRight,n,"contrastRight",1),N))), 
                            "assigning variable logOdds");
                current_statement_begin__ = 69;
                stan::model::assign(logOdds, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                            0, 
                            "assigning variable logOdds");
            }
            }

            // validate transformed parameters
            current_statement_begin__ = 34;
            current_statement_begin__ = 35;
            current_statement_begin__ = 36;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_1__ = 0; k_1__ < 3; ++k_1__) {
                for (int k_0__ = 0; k_0__ < numTrials; ++k_0__) {
                vars__.push_back(logOdds[k_0__][k_1__]);
                }
            }
            for (int k_1__ = 0; k_1__ < numSessions; ++k_1__) {
                for (int k_0__ = 0; k_0__ < 5; ++k_0__) {
                vars__.push_back(b_sess(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < numSubjects; ++k_1__) {
                for (int k_0__ = 0; k_0__ < 5; ++k_0__) {
                vars__.push_back(b_subj(k_0__, k_1__));
                }
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 99;
            validate_non_negative_index("corr_sess", "5", 5);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  corr_sess(static_cast<Eigen::VectorXd::Index>(5),static_cast<Eigen::VectorXd::Index>(5));
            (void) corr_sess;  // dummy to suppress unused var warning

            stan::math::initialize(corr_sess, DUMMY_VAR__);
            stan::math::fill(corr_sess,DUMMY_VAR__);
            current_statement_begin__ = 100;
            validate_non_negative_index("corr_subj", "5", 5);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  corr_subj(static_cast<Eigen::VectorXd::Index>(5),static_cast<Eigen::VectorXd::Index>(5));
            (void) corr_subj;  // dummy to suppress unused var warning

            stan::math::initialize(corr_subj, DUMMY_VAR__);
            stan::math::fill(corr_subj,DUMMY_VAR__);
            current_statement_begin__ = 101;
            validate_non_negative_index("log_lik", "numTrials", numTrials);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  log_lik(static_cast<Eigen::VectorXd::Index>(numTrials));
            (void) log_lik;  // dummy to suppress unused var warning

            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik,DUMMY_VAR__);


            current_statement_begin__ = 104;
            stan::math::assign(corr_sess, multiply(rho_sess,transpose(rho_sess)));
            current_statement_begin__ = 105;
            stan::math::assign(corr_subj, multiply(rho_subj,transpose(rho_subj)));
            current_statement_begin__ = 108;
            for (int n = 1; n <= numTrials; ++n) {

                current_statement_begin__ = 109;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            categorical_logit_log(get_base1(choice,n,"choice",1),get_base1(logOdds,n,"logOdds",1)), 
                            "assigning variable log_lik");
            }

            // validate generated quantities
            current_statement_begin__ = 99;
            stan::math::check_corr_matrix(function__,"corr_sess",corr_sess);
            current_statement_begin__ = 100;
            stan::math::check_corr_matrix(function__,"corr_subj",corr_subj);
            current_statement_begin__ = 101;

            // write generated quantities
            for (int k_1__ = 0; k_1__ < 5; ++k_1__) {
                for (int k_0__ = 0; k_0__ < 5; ++k_0__) {
                vars__.push_back(corr_sess(k_0__, k_1__));
                }
            }
            for (int k_1__ = 0; k_1__ < 5; ++k_1__) {
                for (int k_0__ = 0; k_0__ < 5; ++k_0__) {
                vars__.push_back(corr_subj(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < numTrials; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "Two_Level_Perturbation_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bias" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sens" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "n_exp";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= 5; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_sess" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= numSessions; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 5; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_sess" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= 5; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 5; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rho_sess" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= 5; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_subj" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= numSubjects; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 5; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_subj" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= 5; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 5; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rho_subj" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= numPerturbations; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 4; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= 3; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= numTrials; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "logOdds" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= numSessions; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= 5; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "b_sess" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= numSubjects; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= 5; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "b_subj" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
        for (int k_1__ = 1; k_1__ <= 5; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 5; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corr_sess" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_1__ = 1; k_1__ <= 5; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 5; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "corr_subj" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= numTrials; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bias" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sens" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "n_exp";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= 5; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_sess" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= numSessions; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 5; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_sess" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= ((5 * (5 - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho_sess" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 5; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sd_subj" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= numSubjects; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 5; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z_subj" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= ((5 * (5 - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho_subj" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= numPerturbations; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= 4; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "delta" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= 3; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= numTrials; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "logOdds" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= numSessions; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= 5; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "b_sess" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_1__ = 1; k_1__ <= numSubjects; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= 5; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "b_subj" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }


        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= ((5 * (5 - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "corr_sess" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= ((5 * (5 - 1)) / 2); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "corr_subj" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= numTrials; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}

typedef Two_Level_Perturbation_model_namespace::Two_Level_Perturbation_model stan_model;

